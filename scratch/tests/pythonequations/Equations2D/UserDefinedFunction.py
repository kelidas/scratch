#    pythonequations is a collection of equations expressed as Python classes
#    Copyright (C) 2008 James R. Phillips
#    2548 Vera Cruz Drive
#    Birmingham, AL 35235 USA
#    email: zunzun@zunzun.com
#
#    License: BSD-style (see LICENSE.txt in main source directory)
#    Version info: $Id: __init__.py 267 2010-09-25 13:25:43Z zunzun.com $

import pythonequations, pythonequations.EquationBaseClasses, pythonequations.ExtraCodeForEquationBaseClasses
import numpy # implicitly required by compiling the userFunctionCodeObject in the method EvaluateCachedData() below
numpy.seterr(all = 'raise') # numpy raises warnings, convert to exceptions to trap them


class UserDefinedFunction2D(pythonequations.EquationBaseClasses.Equation2D):
    RequiresAutoGeneratedGrowthAndDecayForms = False
    RequiresAutoGeneratedOffsetForm = False
    RequiresAutoGeneratedReciprocalForm = False
    RequiresAutoGeneratedInverseForms = False
    _name = "User Defined Function"
    _HTML = "y = User Defined Function"
    function_cpp_code = ';' # unused
    
    userDefinedFunctionFlag = True
    userDefinedFunctionText = ''
        
    
    def EvaluateCachedData(self, coeff, _id):

        self.safe_dict['X'] = _id[0]

        # define coefficient values before calling eval
        for i in range(len(self.coefficientDesignatorTuple)):
            self.safe_dict[self.coefficientDesignatorTuple[i]] = coeff[i]
        
        # eval uses previously compiled code for improved performance
        # based on http://lybniz2.sourceforge.net/safeeval._HTML
        return eval(self.userFunctionCodeObject, {"__builtins__":None, 'numpy':numpy}, self.safe_dict)


    def CreateCacheGenerationList(self):
        self.CacheGenerationList = []
        self.CacheGenerationList.append([pythonequations.ExtraCodeForEquationBaseClasses.CG_X(NameOrValueFlag=1), []])


    def CodePYTHON(self):
        s  = """# To the best of my knowledge this code is correct.
# If you find any errors or problems please contact
# me at zunzun@zunzun.com.
#      James


from numpy import *

"""
        s += "# " + self.FittingTargetDict[self.fittingTarget][1] + "\n\n"
        s += "def " + self.__class__.__name__ + "_model(x_in):\n"

        s += "\t# coefficients\n"
        for i in range(len(self.coefficientArray)):
            s += "\t" + self.coefficientDesignatorTuple[i] + " = %-.16E" % (self.coefficientArray[i]) + "\n"
        s += "\n"

        s += "\tX = x_in\n"
        s += "\ttemp = eval('''" + self.userDefinedFunctionText + "''')\n"

        s += "\treturn temp\n"
        return s


    def CodeCPP(self):
        raise NotImplementedError, 'Not implemented for user defined functions'


    def CodeJAVA(self):
        raise NotImplementedError, 'Not implemented for user defined functions'


    def CodeCS(self):
        raise NotImplementedError, 'Not implemented for user defined functions'


    def CodeSCILAB(self):
        raise NotImplementedError, 'Not implemented for user defined functions'


    def CodeMATLAB(self):
        raise NotImplementedError, 'Not implemented for user defined functions'


    def Initialize(self):
        self.additionalDesignatorList = []

        if self.userDefinedFunctionText == '':
            self._HTML = "y = User Defined Function"
            return

        pythonequations.EquationBaseClasses.Equation2D.Initialize(self)
